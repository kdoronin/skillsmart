import unittest
from BST.bst2 import BST
from BST.bst2 import BSTNode
from BST.bst2 import BSTFind

class TestBST(unittest.TestCase):
    def setUp(self):
        self.first_node_without_parent = BSTNode(5, 'test', None)
        self.node_with_parent = BSTNode(3, 'test3', self.first_node_without_parent)
        self.test_node1 = BSTNode(2, 'test2', None)
        self.test_node2 = BSTNode(8, 'test8', None)
        self.empty_tree = BST(None)
        self.test_tree1 = BST(self.first_node_without_parent)
        self.test_tree2 = BST(self.node_with_parent)
        self.full_tree = BST(self.test_node2)
        self.full_tree.AddKeyValue(4, 'test4')
        self.full_tree.AddKeyValue(12, 'test12')
        self.full_tree.AddKeyValue(2, 'test2')
        self.full_tree.AddKeyValue(6, 'test6')
        self.full_tree.AddKeyValue(10, 'test10')
        self.full_tree.AddKeyValue(14, 'test14')
        self.full_tree.AddKeyValue(1, 'test1')
        self.full_tree.AddKeyValue(3, 'test3')
        self.full_tree.AddKeyValue(5, 'test5')
        self.full_tree.AddKeyValue(7, 'test7')
        self.full_tree.AddKeyValue(9, 'test9')
        self.full_tree.AddKeyValue(11, 'test11')
        self.full_tree.AddKeyValue(13, 'test13')
        self.full_tree.AddKeyValue(15, 'test15')

    def test_create_tree(self):
        self.assertIsNone(self.test_tree2.Root.Parent)
        self.assertEqual(self.test_tree1.Root, self.first_node_without_parent)
        self.assertEqual(self.test_tree2.Number, 1)
        self.assertEqual(self.empty_tree.Number, 0)
    def test_find_node(self):
        #Тестируем ситуацию, когда искомый узел был найден
        self.finded_node = self.test_tree1.FindNodeByKey(5)
        self.assertEqual(self.finded_node.Node.NodeKey, 5)
        self.assertTrue(self.finded_node.NodeHasKey)
        #Тестируем ситуацию, когда искомый узел не был найден и новый надо добавить вправо
        self.find_node_to_right = self.test_tree2.FindNodeByKey(4)
        self.assertFalse(self.find_node_to_right.NodeHasKey)
        self.assertEqual(self.find_node_to_right.Node, self.test_tree2.Root)
        self.assertFalse(self.find_node_to_right.ToLeft)
        #Тестируем ситуацию, когда узел не был найден и новый надо добавить влево
        self.find_node_to_left = self.test_tree2.FindNodeByKey(2)
        self.assertFalse(self.find_node_to_left.NodeHasKey)
        self.assertEqual(self.find_node_to_left.Node, self.test_tree2.Root)
        self.assertTrue(self.find_node_to_left.ToLeft)
    def test_add_node(self):
        #Тестируем добавление узла левым потомком
        self.no_element_bykey = self.test_tree1.FindNodeByKey(2)
        self.assertFalse(self.no_element_bykey.NodeHasKey)
        self.assertEqual(self.no_element_bykey.Node, self.test_tree1.Root)
        self.assertTrue(self.no_element_bykey.ToLeft)
        self.assertTrue(self.test_tree1.AddKeyValue(2, 'test2'))
        self.added_element_bykey = self.test_tree1.FindNodeByKey(2)
        self.assertEqual(self.added_element_bykey.Node.NodeKey, 2)
        self.assertEqual(self.added_element_bykey.Node.Parent, self.test_tree1.Root)
        self.assertTrue(self.added_element_bykey.NodeHasKey)
        self.assertFalse(self.added_element_bykey.ToLeft)
        #Тестируем добавление узла правым потомком
        self.no_element_bykey = self.test_tree1.FindNodeByKey(7)
        self.assertFalse(self.no_element_bykey.NodeHasKey)
        self.assertEqual(self.no_element_bykey.Node, self.test_tree1.Root)
        self.assertFalse(self.no_element_bykey.ToLeft)
        self.assertTrue(self.test_tree1.AddKeyValue(7, 'test7'))
        self.added_element_bykey = self.test_tree1.FindNodeByKey(7)
        self.assertEqual(self.added_element_bykey.Node.NodeKey, 7)
        self.assertEqual(self.added_element_bykey.Node.Parent, self.test_tree1.Root)
        self.assertTrue(self.added_element_bykey.NodeHasKey)
        self.assertFalse(self.added_element_bykey.ToLeft)
        #Тестируем добавление первого узла в дерево
        self.no_element_bykey = self.empty_tree.FindNodeByKey(7)
        self.assertFalse(self.no_element_bykey.NodeHasKey)
        self.assertEqual(self.no_element_bykey.Node, self.empty_tree.Root)
        self.assertFalse(self.no_element_bykey.ToLeft)
        self.assertTrue(self.empty_tree.AddKeyValue(7, 'test7'))
        self.added_element_bykey = self.empty_tree.FindNodeByKey(7)
        self.assertEqual(self.added_element_bykey.Node.NodeKey, 7)
        self.assertEqual(self.added_element_bykey.Node, self.empty_tree.Root)
        self.assertIsNone(self.empty_tree.Root.Parent)
        self.assertTrue(self.added_element_bykey.NodeHasKey)
        self.assertFalse(self.added_element_bykey.ToLeft)
    def test_find_min_from_root(self):
        self.finded_min = self.full_tree.FinMinMax(self.full_tree.Root, False)
        self.assertEqual(self.finded_min.NodeKey, 1)
        self.assertEqual(self.finded_min.Parent.NodeKey, 2)
    def test_find_max_from_root(self):
        self.finded_max = self.full_tree.FinMinMax(self.full_tree.Root, True)
        self.assertEqual(self.finded_max.NodeKey, 15)
        self.assertEqual(self.finded_max.Parent.NodeKey, 14)
    def test_find_min_from_node(self):
        self.start_node = self.full_tree.Root.RightChild
        self.finded_min_from_node = self.full_tree.FinMinMax(self.start_node, False)
        self.assertEqual(self.finded_min_from_node.NodeKey, 9)
        self.assertEqual(self.finded_min_from_node.Parent.NodeKey, 10)
    def test_find_max_from_node(self):
        self.start_node = self.full_tree.Root.LeftChild
        self.finded_max_from_node = self.full_tree.FinMinMax(self.start_node, True)
        self.assertEqual(self.finded_max_from_node.NodeKey, 7)
        self.assertEqual(self.finded_max_from_node.Parent.NodeKey, 6)
    def test_delete_node(self):
        self.finded_node = self.full_tree.FindNodeByKey(4)
        self.assertEqual(self.full_tree.Root.LeftChild.NodeKey, 4)
        self.assertTrue(self.finded_node.NodeHasKey)
        self.assertTrue(self.full_tree.DeleteNodeByKey(4))
        self.find_delete_node = self.full_tree.FindNodeByKey(4)
        self.assertFalse(self.find_delete_node.NodeHasKey)
        self.assertNotEqual(self.full_tree.Root.LeftChild.NodeKey, 4)
        self.assertTrue(self.full_tree.DeleteNodeByKey(8))
        self.assertTrue(self.full_tree.DeleteNodeByKey(10))
        self.assertTrue(self.full_tree.DeleteNodeByKey(14))
        self.assertTrue(self.full_tree.DeleteNodeByKey(12))
        self.find_after_delete = self.full_tree.FindNodeByKey(5)
        self.assertTrue(self.find_after_delete.NodeHasKey)
        self.find_after_delete = self.full_tree.FindNodeByKey(1)
        self.assertTrue(self.find_after_delete.NodeHasKey)
        self.find_after_delete = self.full_tree.FindNodeByKey(2)
        self.assertTrue(self.find_after_delete.NodeHasKey)
        self.find_after_delete = self.full_tree.FindNodeByKey(3)
        self.assertTrue(self.find_after_delete.NodeHasKey)
        self.find_after_delete = self.full_tree.FindNodeByKey(6)
        self.assertTrue(self.find_after_delete.NodeHasKey)
        self.find_after_delete = self.full_tree.FindNodeByKey(7)
        self.assertTrue(self.find_after_delete.NodeHasKey)
        self.find_after_delete = self.full_tree.FindNodeByKey(13)
        self.assertTrue(self.find_after_delete.NodeHasKey)
        self.find_after_delete = self.full_tree.FindNodeByKey(12)
        self.assertFalse(self.find_after_delete.NodeHasKey)
        self.find_after_delete = self.full_tree.FindNodeByKey(11)
        self.assertTrue(self.find_after_delete.NodeHasKey)
        self.find_after_delete = self.full_tree.FindNodeByKey(14)
        self.assertFalse(self.find_after_delete.NodeHasKey)
        self.find_after_delete = self.full_tree.FindNodeByKey(15)
        self.assertTrue(self.find_after_delete.NodeHasKey)
        self.find_after_delete = self.full_tree.FindNodeByKey(10)
        self.assertFalse(self.find_after_delete.NodeHasKey)
        #Тестируем удаление корня
        self.assertTrue(self.test_tree1.DeleteNodeByKey(5))
        self.find_after_delete = self.test_tree1.FindNodeByKey(5)
        self.assertFalse(self.find_after_delete.NodeHasKey)
    def test_count(self):
        self.assertEqual(self.full_tree.Count(), 15)
        self.assertEqual(self.empty_tree.Count(), 0)
        self.assertEqual(self.test_tree1.Count(), 1)
        self.assertTrue(self.full_tree.DeleteNodeByKey(7))
        self.assertEqual(self.full_tree.Count(), 14)
    def test_wide(self):
        wide_result = self.full_tree.WideAllNodes()
        self.assertEqual(wide_result[0], self.full_tree.Root)
        self.assertEqual(wide_result[1], self.full_tree.Root.LeftChild)
        self.assertEqual(wide_result[2], self.full_tree.Root.RightChild)
    def test_deep(self):
        deep_result = self.full_tree.DeepAllNodes(0)
        deep_result1 = self.full_tree.DeepAllNodes(1)
        deep_result2 = self.full_tree.DeepAllNodes(2)
        self.assertEqual(len(deep_result), 15)
        self.assertEqual(len(deep_result1), 15)
        self.assertEqual(len(deep_result2), 15)
        self.assertEqual(deep_result[7], self.full_tree.Root)
        self.assertEqual(deep_result1[14], self.full_tree.Root)
        self.assertEqual(deep_result2[0], self.full_tree.Root)